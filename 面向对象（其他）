面向对象三大特性
（1）封装：将属性和方法写到类的里面的操作
         ：封装可以为属性添加私有权限 self.—__money()
（2）继承：
          ž子类继承父类所有属性和方法
          ž子类也可以重写父类方法和属性
（3）多态：传入不同对象结果不同（最好依赖于继承去写多态）
多态定义：使用对象的一种方式，子类重写父类方法，调用子类对象的相同父类方法（一个父类可以可以创建许多种子类，这些子类都继承了父类的方法，
因而成为这些子类的父类的方法），不同的子类传入对象不一样，所以执行结果不同！
实现步骤：（1）定义父类，定义公有fangfa
          （2）定义子类，重写父类方法
          （3）传递子类对象给调用者，显示不同执行结果
# 需求：警务人员和警犬一起工作，警犬分两种，追击敌人和识别毒品，使用不同的警犬，完成不同的工作
# 多态步骤 1：创建父类，定义公共方法
class Dog():
    def work(self):
        pass
# 2：创建子类，重写父类方法
class RunningDog(Dog):
    def work(self):
        print('追击敌人')
class DrugDog(Dog):
    def work(self):
        print('识别毒品')
class People():
    def work_with_dog(self,dog):
        dog.work
#3：给子类对象传递不同参数，执行不同结果

RD = RunningDog
DD =DrugDog


daqiu = People()
daqiu.work_with_dog(RD)

类属性：类对象所拥有的属性，被该类对象所有实例都拥有的属性，可以使用类对象和实例对象使用
类属性优点：当所有子类所共同拥有一种属性时可以使用类属性，节省内存空间。

修改类属性：类属性只能通过类对象修改，如果使用实例对象修改类属性，实际上是表示创建实例属性
类.类属性 = 修改的值
实例对象修改：
对象.属性名 = 修改的值


类方法：需要用装饰器（@classmethod）来标识其为类方法，定义类方法，第一个参数必须为类对象，一般以cls作为第一个参数：def get_money(cls):
类方法的使用场景：当需要使用类对象（例如访问私有属性），定义类方法
类方法一般和类属性配合使用
class Dog():
    __money = 10
    @classmethod
    def get_money(cls):
        return cls.__money
wangcai = Dog()
print(wangcai.get_money())
cls指代Dog类
静态方法：需要用装饰器（@staticmethod）来标识其为静态方法，静态方法既不需要传递类对象，也不需要传递实例对象，（形参没有self/cls）
静态方法可以通过实例对象或者类对象去访问
使用场景：当既不需要使用实例对象（实例属性，实例方法），也不需要使用类对象时（类对象，类属性），定义静态方法，取消不需要的参数传递
class Dog():
    @staticmethod
    def get_money():
        print('这是一个静态方法，你可以通过实例对象访问，'
              '也可以通过类对象访问')
wangchai = Dog()
Dog.get_money()
wangchai.get_money()（类和对线都可以调用静态方法）


