class Master():
    def __init__(self):
        self.kong_fu = '[古法煎饼果子配方]'
    def make_cake(self):
        print(f'运用{self.kong_fu}制作煎饼果子')
class School():
    def __init__(self):
        self.kong_fu = '[黑马煎饼果子配方]'
    def make_cake(self):
        print(f'运用{self.kong_fu}制作煎饼果子')

class Prentice(Master, School):
    def __init__(self):
        self.kong_fu = '[全新黑马古法煎饼果子】'

    def make_cake(self):
        # 这里加自己的初始化的原因是：如果先调用父类属性和方法，父类属性会覆盖子类属性，因而调用属性前，现调用自己属性的初始化
        self.__init__()
        print(f'运用{self.kong_fu}制作煎饼果子')
    # 子类调用父类同名方法时要对父类方法属性重新封装
    子类调用父类同名属性，在子类中，重新定义一个方法即【25】，此时，需要对父类方法和属性进行重新封装，即父类名.函数名（父类方法）（）	
	同时需要对父类进行初始化，再次调用初始化即__init__的原因时，想要调用父类的属性和方法，而属性和方法存储在——init——中 
  具体操作【26】，【27】
    def make_master_cake(self):
        # 即父类名.函数名（）
        Master.__init__(self)
        Master.make_cake(self)
daqiu = Prentice()
daqiu.make_cake()
daqiu.make_master_cake()
